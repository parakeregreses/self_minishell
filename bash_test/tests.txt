1.

jlaine-b@k2r2p5:~$ "|"
|: command not found
jlaine-b@k2r2p5:~$ |
bash: syntax error near unexpected token `|'

grep i no_exist                
grep: no_exist: No such file or directory

grep i exist                
-> imprime resultat dans stdin

grep i no_exist                
grep: no_exist: No such file or directory

grep a > outfile1 infile1
-> affiche resultat de grep a sur infile1 dans outfile1

grep a > outfile1 infile1 infile2
-> affiche dans outfile les resultats de grep a sur infile1 et infile2

grep a < note.txt <
bash: syntax error near unexpected token `newline'

grep a<note.txt<main.c
affiche resultat de grep sur main.c

grep a <<<< lim2 | grep a main.c
bash: syntax error near unexpected token `<'

=> les fichiers sont pris comme des arguments de grep (mais il faut qu'ils existent). Cependant c'est grep qui va gerer ca avec execve.

--------------------------------------------------------------------------

2. infile

grep a < no_exist < no_exist2
bash: : no_exist no such file or directory

grep a < no_exist < infile1
bash: no_exist: No such file or directory

grep a < infile1 < infile2
grep s'applique seulement a infile2

grep a < infile1 < no_exist
bash: no_exist: No such file or directory

grep < a < note.txt
bash: a: No such file or directory

grep < note.txt
grep renvoie erreur car pas de pattern

grep < no_exist
grep renvoie erreur car pas de pattern

grep a < in"fi"le2
affiche resultat de grep sur infile2

-> on avance, si on rencontre un < + fichier qui existe pas : erreur. Sinon, devient fichier dans lequel on va ecrire.

grep a < infile1 << lim
grep a sur heredoc

grep a < no_exist << infile2
here_doc apparait pour taper
mais message erreur : bash: infile1: No such file or directory (donc no_exist a ete envoye comme argument de grep ?!)

grep a << lim < infile2
le heredoc s'affiche pour qu'on puisse taper, mais grep s'applique seulement a infile2

grep a << lim1 << lim2
heredoc s'ouvre et continue jusqu'a ce qu'on tape lim1
heredoc continue jusqu'a ce qu'on tape lim2, et grep s'applique seulement a ce qui a ete ecrit entre lim1 et lim2.

grep a << lim1 << lim2 | wrong_cmd
heredoc s'ouvre et continue jusqu'a ce qu'on tape lim1 puis lim2, puis wrong_cmd s'affiche.

grep a << lim < no_exist < infile1
le heredoc s'affiche pour qu'on puisse taper, puis bash: no_exist: No such file or directory

--------------------------------------------------------------------------
3. Autres elements : arguments de grep

grep a < infile1
-> imprime resultat dans stdin

grep a < infile1 > outfile1
-> imprime resultat dans outfile1 (le cree ou l'ecrase)

grep a < infile1 > outfile1 no_exist
-> grep: no_exist: No such file or directory

grep a < infile1 > outfile1 exist
affiche resultat de grep sur exist dans outfile1

grep a < infile1 no_exist > outfile1 
-> grep: no_exist: No such file or directory

grep < infile1 i > outfile1
affiche resultat grep i sur infile1 dans outfile1

grep a < no_exist no_exist2
bash: no such file or directory: no_exist

sleep 3 < infile1 < infile2
attends 3 secondes

DONC les elements qui ne sont pas juste derriere < ou > (separer du premier element par un espace) sont consideres comme des arguments de cmd !!!

ls << | wc -l
bash: syntax error near unexpected token `|'

ls << | wc -l
bash: syntax error near unexpected token `|'